/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type News = {
  _id: string;
  _type: "news";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  image?: string;
  category?: string;
  description?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "leader";
  };
  createdAt?: string;
};

export type Units = {
  _id: string;
  _type: "units";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  image?: string;
  members?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "leader";
  }>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Leader = {
  _id: string;
  _type: "leader";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: Array<string>;
  image?: string;
  tenCsd?: string;
  tenCsdTrucThuoc?: string;
  soLyLich?: string;
  soTheDang?: string;
  gioiTinh?: "Nam" | "N\u1EEF";
  ngaySinh?: string;
  congViecChinhDangLam?: string;
  tonGiao?: string;
  ngayVaoDang?: string;
  ngayVaoDangChinhThuc?: string;
  ngayVaoDangLan2?: string;
};

export type Terms = {
  _id: string;
  _type: "terms";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  name?: string;
  description?: string;
  data?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "leader";
  }>;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | News | Units | Slug | Leader | Terms | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: TERMS_QUERY
// Query: *[_type == "terms"] | order(_createdAt asc) {  _id,  name,  description,  data[] -> {    name, _id, title, image  },  _createdAt,  _updatedAt, }
export type TERMS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  description: string | null;
  data: Array<{
    name: string | null;
    _id: string;
    title: Array<string> | null;
    image: string | null;
  }> | null;
  _createdAt: string;
  _updatedAt: string;
}>;
// Variable: NEWS_QUERY
// Query: *[_type == "news" && defined(slug.current)] {  _id,  slug,  title,  image,  category,  author -> {    name, _id, title  },  createdAt }
export type NEWS_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  title: string | null;
  image: string | null;
  category: string | null;
  author: {
    name: string | null;
    _id: string;
    title: Array<string> | null;
  } | null;
  createdAt: string | null;
}>;
// Variable: NEW_QUERY_BY_ID
// Query: *[_type == "news" && _id == $id][0] {  _id,  slug,  title,  image,  category,  author -> {    name, _id, title, image  },  _createdAt,  description }
export type NEW_QUERY_BY_IDResult = {
  _id: string;
  slug: Slug | null;
  title: string | null;
  image: string | null;
  category: string | null;
  author: {
    name: string | null;
    _id: string;
    title: Array<string> | null;
    image: string | null;
  } | null;
  _createdAt: string;
  description: string | null;
} | null;
// Variable: UNITS_QUERY
// Query: *[_type == "units" && defined(slug.current)] {  _id,  slug,  name,  image,  members[] -> {    _id,    name,    title,    image,    tenCsd,    tenCsdTrucThuoc,    soLyLich,    soTheDang,    gioiTinh,    ngaySinh,    congViecChinhDangLam,    tonGiao,    ngayVaoDang,    ngayVaoDangChinhThuc,    ngayVaoDangLan2  },  description,  _createdAt,  _updateAt }
export type UNITS_QUERYResult = Array<{
  _id: string;
  slug: Slug | null;
  name: string | null;
  image: string | null;
  members: Array<{
    _id: string;
    name: string | null;
    title: Array<string> | null;
    image: string | null;
    tenCsd: string | null;
    tenCsdTrucThuoc: string | null;
    soLyLich: string | null;
    soTheDang: string | null;
    gioiTinh: "Nam" | "N\u1EEF" | null;
    ngaySinh: string | null;
    congViecChinhDangLam: string | null;
    tonGiao: string | null;
    ngayVaoDang: string | null;
    ngayVaoDangChinhThuc: string | null;
    ngayVaoDangLan2: string | null;
  }> | null;
  description: string | null;
  _createdAt: string;
  _updateAt: null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"terms\"] | order(_createdAt asc) {\n  _id,\n  name,\n  description,\n  data[] -> {\n    name, _id, title, image\n  },\n  _createdAt,\n  _updatedAt,\n }": TERMS_QUERYResult;
    "*[_type == \"news\" && defined(slug.current)] {\n  _id,\n  slug,\n  title,\n  image,\n  category,\n  author -> {\n    name, _id, title\n  },\n  createdAt\n }": NEWS_QUERYResult;
    "*[_type == \"news\" && _id == $id][0] {\n  _id,\n  slug,\n  title,\n  image,\n  category,\n  author -> {\n    name, _id, title, image\n  },\n  _createdAt,\n  description\n }": NEW_QUERY_BY_IDResult;
    "*[_type == \"units\" && defined(slug.current)] {\n  _id,\n  slug,\n  name,\n  image,\n  members[] -> {\n    _id,\n    name,\n    title,\n    image,\n    tenCsd,\n    tenCsdTrucThuoc,\n    soLyLich,\n    soTheDang,\n    gioiTinh,\n    ngaySinh,\n    congViecChinhDangLam,\n    tonGiao,\n    ngayVaoDang,\n    ngayVaoDangChinhThuc,\n    ngayVaoDangLan2\n  },\n  description,\n  _createdAt,\n  _updateAt\n }": UNITS_QUERYResult;
  }
}
